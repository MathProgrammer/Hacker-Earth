Let us call an integer good if the sum of digits is a prime number. 

Let f(i) be the number of good integers < i 

This is a monotonic function. 

Let us binary search and find the smallest i, such that f(i) = k + f(L)

Then, the k-th good number would be (i - 1) 

-----

long long binary_search_answer(long long left, long long right, long long k)
{
	//[1, L - 1] < k <= [1, R - 1]
	while(right - left > 1)
	{
		long long mid = (left + right)/2;
	
		//Measures [1, M - 1]
		if(get_count(mid) < k)
		{
			left = mid;
		}
		else 
		{
			right = mid;
		}
	}

	long long first_integer_having_k_smaller_good_numbers = right; 
	long long kth_good_number = right - 1;

	return kth_good_number;
}

-----

Let us discuss how to count the number of good integers < N. 

Let us first notice that the sum of digits is at most 9 x 18 = 162. 

The sum of digits is in between [1, 162]. Let us precompute all prime numbers in this range. 

There are two possibilities for good integers < N. 

1. They have fewer digits than N. 
2. They have the same number of digits as N. 

----

Let us discuss how to count good integers with fewer digits than N. 

Let us iterate over the final sum, which is one of the prime numbers which we have computed.

It is the same as counting the number of strings of length D with sum S. 

This can be precomputed with a DP. We just have to make sure that the first digit is > 0. 

We will percompute it like this 

void precompute_no_of_ways()
{
	memset(no_of_ways, 0, sizeof(no_of_ways));
	no_of_ways[0][0] = 1;

	for(int digits = 1; digits < MAX_D; digits++)
	{
		for(int sum = 0; sum < MAX_N; sum++)
		{
			for(int last_digit = 0; last_digit <= 9; last_digit++)
			{
				if(last_digit <= sum)
				{
					no_of_ways[digits][sum] += no_of_ways[digits - 1][sum - last_digit];
				}
			}
		}
	}
}

long long get_count_with_leading_zero(string S)
{
	long long answer = 0;
	for(int digits = 1; digits < S.size(); digits++)
	{
		for(int prime_sum : primes)
		{
			for(int first_digit = 1; first_digit <= 9; first_digit++)
			{
				if(first_digit <= prime_sum)
				{
					answer += no_of_ways[digits - 1][prime_sum - first_digit];
				}
			}
		}
	}

	return answer;
} 

-----

Now, let us discuss how to count the number of integers < N with the same number of digits. 

All integers of this form will 

1. Match some prefix of length i in N 
2. Have a smaller digit at the (i + 1)th position where d < S[i + 1]
3. The suffix can be chosen freely. 

Iterate over all prefixes and the smaller digit. 
Iterate over all possible prime sums. Accordingly, suffix_sum = prime_sum - prefix_sum 
Add no_of_ways[suffix_length][suffix_sum] to the answer. 

long long get_count_without_leading_zero(string S)
{
	long long answer = 0;
	int prefix_sum = 0;
	for(int i = 0; i < S.size(); i++)
	{
		for(int current_digit = 0; current_digit + '0' < S[i]; current_digit++)
		{
			if(i == 0 && current_digit == 0)
			{
				continue;
			}
			int prefix_sum_now = prefix_sum + current_digit;

			int suffix_length = (S.size() - 1 - i);

			for(int prime_sum : primes)
			{
				if(prime_sum < prefix_sum_now)
				{
					continue;
				}

				int suffix_sum = prime_sum - prefix_sum_now;

				answer += no_of_ways[suffix_length][suffix_sum];
			}
		}

		prefix_sum += (S[i] - '0');
	}
	return answer;
}
