Let us look at the prime factorisation of A[i] 

A[i] = 2^a 3^b 5^c ... 

Notice that our operations can only change the exponents of a and b and the remaining is invariant. 

Since we can always reduce the exponent of 2 and 3, let us reduce it till both a = b = 0 

Let us call the 'normal' value of A[i], the value of A[i] after it is no longer divisible by 2 and 3. 

It is possible to make all elements equal if and only if all elements have the same normal value. 

------

#include <iostream>
#include <vector>
#include <set>
using namespace std;

int normalise(int n)
{
	if(n == 0)
	{
		return n; 
	}
	
	while(n%2 == 0)
	{
		n /= 2;
	}

	while(n%3 == 0)
	{
		n /= 3;
	}

	return n;
}

void solve()
{
	int no_of_elements; 
	cin >> no_of_elements; 

	set <int> normalised_value;
	vector <int> A(no_of_elements + 1);
	for(int i = 1; i <= no_of_elements; i++)
	{
		cin >> A[i];

		normalised_value.insert(normalise(A[i]));
	}

	cout << (normalised_value.size() == 1 ? "Yes" : "No") << "\n";
}

int main() 
{
	int no_of_test_cases; 
	cin >> no_of_test_cases; 

	while(no_of_test_cases--)
		solve();

	return 0;
}
